@model CIADatabase.Areas.JediArchives.Models.JediArticle

@{
    ViewBag.Title = "Create Jedi Article";
    Layout = "~/Areas/JediArchives/Views/Shared/_Layout.cshtml";
}

<div class="d-flex flex-column align-items-stretch mt-5">
    <div class="text-center">
        <h2 class="text-center mb-4">Add Entry</h2>
    </div>

    @using (Html.BeginForm("Create", "JediArticles", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal w-100" style="max-width: 900px; margin: 0 auto; text-align: center;">
            <h4 class="text-center mb-4">@ViewBag.SectionTitle</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger text-center" })

            <input type="hidden" name="JediSectionId" value="@ViewBag.SectionId" />

            <!-- Order -->
            <div class="form-group">
                @Html.LabelFor(model => model.Order, htmlAttributes: new { @class = "form-label" })
                <div class="input-container">
                    @Html.EditorFor(model => model.Order, new { htmlAttributes = new { @class = "form-control jedi-input extra-small-input" } })
                </div>
                @Html.ValidationMessageFor(model => model.Order, "", new { @class = "text-danger" })
            </div>

            <!-- Title -->
            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "form-label" })
                <div class="input-container">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control jedi-input smaller-input" } })
                </div>
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>

            <!-- Planet -->
            <div class="form-group">
                @Html.LabelFor(model => model.Planet, htmlAttributes: new { @class = "form-label" })
                <div class="input-container">
                    @Html.EditorFor(model => model.Planet, new { htmlAttributes = new { @class = "form-control jedi-input smaller-input" } })
                </div>
                @Html.ValidationMessageFor(model => model.Planet, "", new { @class = "text-danger" })
            </div>

            <!-- Location -->
            <div class="form-group">
                @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "form-label" })
                <div class="input-container">
                    @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control jedi-input smaller-input" } })
                </div>
                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
            </div>



            <!-- File Uploads -->
            <div class="form-group">
                @Html.Label("Starmap 1", "Starmap 1", htmlAttributes: new { @class = "form-label" })
                <div class="input-container">
                    <input type="file" name="Starmap1" class="form-control jedi-input jedi-file-input" />
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Starmap 2", "Starmap 2", htmlAttributes: new { @class = "form-label" })
                <div class="input-container">
                    <input type="file" name="Starmap2" class="form-control jedi-input jedi-file-input" />
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Starmap 3", "Starmap 3", htmlAttributes: new { @class = "form-label" })
                <div class="input-container">
                    <input type="file" name="Starmap3" class="form-control jedi-input jedi-file-input" />
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Location Map 1", "Location Map 1", htmlAttributes: new { @class = "form-label" })
                <div class="input-container">
                    <input type="file" name="LocationMap1" class="form-control jedi-input jedi-file-input" />
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Location Map 2", "Location Map 2", htmlAttributes: new { @class = "form-label" })
                <div class="input-container">
                    <input type="file" name="LocationMap2" class="form-control jedi-input jedi-file-input" />
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Location Map 3", "Location Map 3", htmlAttributes: new { @class = "form-label" })
                <div class="input-container">
                    <input type="file" name="LocationMap3" class="form-control jedi-input jedi-file-input" />
                </div>
            </div>



            <!-- Briefing Editor -->
            <div class="form-group mb-4">
                @Html.LabelFor(model => model.Briefing, htmlAttributes: new { @class = "form-label" })
                <div id="BriefingEditor" class="jedi-quill-editor"></div>
                <input type="hidden" name="Briefing" id="BriefingInput" />
            </div>


            <!-- Video -->
            <div class="form-group mb-4">
                @Html.LabelFor(model => model.Video, htmlAttributes: new { @class = "form-label" })
                <div class="input-container">
                    <input type="text" name="Video" class="form-control jedi-input jedi-video-input" placeholder="Enter YouTube URL" />
                </div>
            </div>


            <!-- After Action Report -->
            <div class="form-group mb-4">
                @Html.LabelFor(model => model.AfterActionReport, htmlAttributes: new { @class = "form-label" })
                <div id="AfterActionReportEditor" class="jedi-quill-editor"></div>
                <input type="hidden" name="AfterActionReport" id="AfterActionReportInput" />
            </div>


            <!-- Submit Button -->
            <div class="form-group text-center mt-4">
                <button type="submit" class="btn jedi-btn w-50">Save Article</button>
            </div>
        </div>
    }

    <!-- Back to Details Button -->
    <div class="form-group text-center mt-4">
        @Html.ActionLink(
                "Back to List",
                "Details",
                "JediSections",
                new { id = ViewBag.SectionId },
                new { @class = "btn jedi-btn w-25" }
            )
    </div>
</div>

<script src="https://cdn.quilljs.com/1.3.7/quill.min.js"></script>
<script>
    // Initialize Quill for Briefing
    var briefingEditor = new Quill('#BriefingEditor', {
        theme: 'snow',
        modules: {
            toolbar: [
                ['bold', 'italic', 'underline'],
                [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                ['link'],
                [{ 'align': [] }],
                ['clean']
            ]
        }
    });

    // Sync Briefing content with hidden input field
    briefingEditor.on('text-change', function () {
        document.querySelector('#BriefingInput').value = briefingEditor.root.innerHTML;
    });

    // Explicitly apply styles to ensure they override Quill defaults
    document.querySelector('#BriefingEditor .ql-editor').style.height = "400px";
    document.querySelector('#BriefingEditor .ql-editor').style.color = "#00bcd4";
    document.querySelector('#BriefingEditor .ql-editor').style.backgroundColor = "#000";

    // Initialize Quill for After Action Report
    var afterActionEditor = new Quill('#AfterActionReportEditor', {
        theme: 'snow',
        modules: {
            toolbar: [
                ['bold', 'italic', 'underline'],
                [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                ['link'],
                [{ 'align': [] }],
                ['clean']
            ]
        }
    });

    // Sync After Action Report content with hidden input field
    afterActionEditor.on('text-change', function () {
        document.querySelector('#AfterActionReportInput').value = afterActionEditor.root.innerHTML;
    });

    // Explicitly apply styles to ensure they override Quill defaults
    document.querySelector('#AfterActionReportEditor .ql-editor').style.height = "400px";
    document.querySelector('#AfterActionReportEditor .ql-editor').style.color = "#00bcd4";
    document.querySelector('#AfterActionReportEditor .ql-editor').style.backgroundColor = "#000";
</script>