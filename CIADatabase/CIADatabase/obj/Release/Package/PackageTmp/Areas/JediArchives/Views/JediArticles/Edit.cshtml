@model CIADatabase.Areas.JediArchives.Models.JediArticle

@{
    ViewBag.Title = "Edit Jedi Article";
    Layout = "~/Areas/JediArchives/Views/Shared/_Layout.cshtml";
}

<div class="d-flex flex-column align-items-stretch mt-5">
    <div class="text-center">
        <h2 class="text-center mb-4">Edit Entry</h2>
    </div>

    @using (Html.BeginForm("Edit", "JediArticles", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal w-100" style="max-width: 900px; margin: 0 auto; text-align: center;">
            <h4 class="text-center mb-4">@ViewBag.SectionTitle</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger text-center" })

            <!-- Hidden Field for Article ID -->
            <input type="hidden" name="JediArticleId" value="@Model.JediArticleId" />

            <!-- Order -->
            <div class="form-group">
                @Html.LabelFor(model => model.Order, htmlAttributes: new { @class = "form-label" })
                <div class="input-container">
                    @Html.EditorFor(model => model.Order, new { htmlAttributes = new { @class = "form-control jedi-input extra-small-input" } })
                </div>
                @Html.ValidationMessageFor(model => model.Order, "", new { @class = "text-danger" })
            </div>

            <!-- Title -->
            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "form-label" })
                <div class="input-container">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control jedi-input smaller-input" } })
                </div>
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>

            <!-- Planet -->
            <div class="form-group">
                @Html.LabelFor(model => model.Planet, htmlAttributes: new { @class = "form-label" })
                <div class="input-container">
                    @Html.EditorFor(model => model.Planet, new { htmlAttributes = new { @class = "form-control jedi-input smaller-input" } })
                </div>
                @Html.ValidationMessageFor(model => model.Planet, "", new { @class = "text-danger" })
            </div>

            <!-- Location -->
            <div class="form-group">
                @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "form-label" })
                <div class="input-container">
                    @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control jedi-input smaller-input" } })
                </div>
                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
            </div>

            <!-- File Uploads with Current Images -->
            @foreach (var map in new[]
            {
                new { Name = "Starmap1", Label = "Starmap 1", Data = Model.Starmap1 },
                new { Name = "Starmap2", Label = "Starmap 2", Data = Model.Starmap2 },
                new { Name = "Starmap3", Label = "Starmap 3", Data = Model.Starmap3 },
                new { Name = "LocationMap1", Label = "Location Map 1", Data = Model.LocationMap1 },
                new { Name = "LocationMap2", Label = "Location Map 2", Data = Model.LocationMap2 },
                new { Name = "LocationMap3", Label = "Location Map 3", Data = Model.LocationMap3 }
            })
            {
                <div class="form-group">
                    @Html.Label(map.Label, map.Label, htmlAttributes: new { @class = "form-label" })
                    @if (map.Data != null)
                    {
                        <div class="input-container mb-3">
                            <img src="data:image/png;base64,@Convert.ToBase64String(map.Data)" alt="@map.Label" class="img-thumbnail" style="max-width: 300px;" />
                        </div>
                    }
                    <div class="input-container">
                        <input type="file" name="@map.Name" class="form-control jedi-input jedi-file-input" />
                    </div>
                </div>
            }

            <!-- Briefing Editor -->
            <div class="form-group mb-4">
                @Html.LabelFor(model => model.Briefing, htmlAttributes: new { @class = "form-label" })
                <div id="BriefingEditor" class="jedi-quill-editor" style="height: 600px;"></div>
                <input type="hidden" name="Briefing" id="BriefingInput" value="@Html.Raw(Model.Briefing)" />
            </div>

            <!-- Video -->
            <div class="form-group mb-4">
                @Html.LabelFor(model => model.Video, htmlAttributes: new { @class = "form-label" })
                <div class="input-container">
                    <input type="text" name="Video" class="form-control jedi-input jedi-video-input" placeholder="Enter YouTube URL" value="@Model.Video" />
                </div>
            </div>

            <!-- After Action Report -->
            <div class="form-group mb-4">
                @Html.LabelFor(model => model.AfterActionReport, htmlAttributes: new { @class = "form-label" })
                <div id="AfterActionReportEditor" class="jedi-quill-editor" style="height: 600px;"></div>
                <input type="hidden" name="AfterActionReport" id="AfterActionReportInput" value="@Html.Raw(Model.AfterActionReport)" />
            </div>

            <!-- Submit Button -->
            <div class="form-group text-center mt-4">
                <button type="submit" class="btn jedi-btn w-50">Save Changes</button>
            </div>
        </div>
    }

    <!-- Back to Details Button -->
    <div class="form-group text-center mt-4">
        @Html.ActionLink(
            "Back to Details",
            "Details",
            "JediArticles",
            new { id = Model.JediArticleId },
            new { @class = "btn jedi-btn w-25" }
        )
    </div>
</div>

<script src="https://cdn.quilljs.com/1.3.7/quill.min.js"></script>
<script>
    // Initialize Quill for Briefing
    var briefingEditor = new Quill('#BriefingEditor', {
        theme: 'snow',
        modules: {
            toolbar: [
                ['bold', 'italic', 'underline'],
                [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                ['link'],
                [{ 'align': [] }],
                ['clean']
            ]
        }
    });
    briefingEditor.root.innerHTML = document.querySelector('#BriefingInput').value;

    briefingEditor.on('text-change', function () {
        document.querySelector('#BriefingInput').value = briefingEditor.root.innerHTML;
    });

    // Initialize Quill for After Action Report
    var afterActionEditor = new Quill('#AfterActionReportEditor', {
        theme: 'snow',
        modules: {
            toolbar: [
                ['bold', 'italic', 'underline'],
                [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                ['link'],
                [{ 'align': [] }],
                ['clean']
            ]
        }
    });
    afterActionEditor.root.innerHTML = document.querySelector('#AfterActionReportInput').value;

    afterActionEditor.on('text-change', function () {
        document.querySelector('#AfterActionReportInput').value = afterActionEditor.root.innerHTML;
    });

    // Set custom heights for the editors
    document.querySelector('#BriefingEditor .ql-editor').style.height = "500px";
    document.querySelector('#BriefingEditor .ql-editor').style.color = "#00bcd4";
    document.querySelector('#BriefingEditor .ql-editor').style.backgroundColor = "#000";

    document.querySelector('#AfterActionReportEditor .ql-editor').style.height = "500px";
    document.querySelector('#AfterActionReportEditor .ql-editor').style.color = "#00bcd4";
    document.querySelector('#AfterActionReportEditor .ql-editor').style.backgroundColor = "#000";

</script>
